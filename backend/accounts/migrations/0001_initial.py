# Generated by Django 5.0.1 on 2025-10-15 02:26

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('phone_number', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('role', models.CharField(choices=[('ADMIN', 'Admin'), ('STAFF', 'Staff'), ('PARTNER', 'Partner'), ('CLIENT', 'Client')], default='CLIENT', help_text='User role determining permissions', max_length=20)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('INACTIVE', 'Inactive'), ('SUSPENDED', 'Suspended'), ('PENDING_VERIFICATION', 'Pending Verification')], default='ACTIVE', help_text='User account status', max_length=25)),
                ('preferred_language', models.CharField(choices=[('en', 'English'), ('pt', 'PortuguÃªs')], default='en', help_text='Preferred language for the interface', max_length=2)),
                ('profile_picture', models.ImageField(blank=True, help_text='User profile picture', null=True, upload_to='profile_pictures/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('is_kyc_verified', models.BooleanField(default=False)),
                ('kyc_verified_at', models.DateTimeField(blank=True, null=True)),
                ('kyc_documents', models.JSONField(blank=True, default=dict)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['-created_at'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('name_pt', models.CharField(blank=True, help_text='Portuguese name', max_length=100)),
                ('name_en', models.CharField(blank=True, help_text='English name', max_length=100)),
                ('location_type', models.CharField(choices=[('COUNTRY', 'Country'), ('PROVINCE', 'Province'), ('CITY', 'City')], max_length=10)),
                ('code', models.CharField(blank=True, help_text='ISO code or abbreviation', max_length=10)),
                ('is_active', models.BooleanField(default=True)),
                ('latitude', models.DecimalField(blank=True, decimal_places=8, max_digits=10, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=8, max_digits=11, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.location')),
            ],
            options={
                'verbose_name': 'Location',
                'verbose_name_plural': 'Locations',
                'ordering': ['name'],
                'unique_together': {('name', 'location_type', 'parent')},
            },
        ),
        migrations.CreateModel(
            name='PartnerProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('business_name', models.CharField(max_length=200)),
                ('business_description', models.TextField()),
                ('business_registration_number', models.CharField(blank=True, max_length=50)),
                ('tax_id', models.CharField(blank=True, max_length=50)),
                ('website_url', models.URLField(blank=True)),
                ('business_hours', models.JSONField(default=dict, help_text='Business hours by day of week')),
                ('verification_status', models.CharField(choices=[('PENDING', 'Pending'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected'), ('SUSPENDED', 'Suspended')], default='PENDING', max_length=15)),
                ('verification_documents', models.JSONField(blank=True, default=dict)),
                ('verification_notes', models.TextField(blank=True)),
                ('verified_at', models.DateTimeField(blank=True, null=True)),
                ('bank_account_details', models.JSONField(blank=True, default=dict)),
                ('payout_frequency', models.CharField(choices=[('WEEKLY', 'Weekly'), ('BIWEEKLY', 'Bi-weekly'), ('MONTHLY', 'Monthly')], default='WEEKLY', max_length=20)),
                ('total_earnings', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('completed_bookings', models.PositiveIntegerField(default=0)),
                ('average_rating', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('primary_location', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='primary_partners', to='accounts.location')),
                ('service_areas', models.ManyToManyField(blank=True, related_name='serving_partners', to='accounts.location')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='partner_profile', to=settings.AUTH_USER_MODEL)),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_partners', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Partner Profile',
                'verbose_name_plural': 'Partner Profiles',
            },
        ),
        migrations.CreateModel(
            name='UserPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_email', models.BooleanField(default=True)),
                ('notification_sms', models.BooleanField(default=False)),
                ('notification_push', models.BooleanField(default=True)),
                ('marketing_emails', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('default_country', models.ForeignKey(blank=True, limit_choices_to={'location_type': 'COUNTRY'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_preferences_country', to='accounts.location')),
                ('default_province', models.ForeignKey(blank=True, limit_choices_to={'location_type': 'PROVINCE'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_preferences_province', to='accounts.location')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='preferences', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Preference',
                'verbose_name_plural': 'User Preferences',
            },
        ),
    ]
