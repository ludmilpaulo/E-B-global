# Generated by Django 5.0.1 on 2025-10-15 02:26

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ServiceCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('name_pt', models.CharField(blank=True, help_text='Portuguese name', max_length=100)),
                ('name_en', models.CharField(blank=True, help_text='English name', max_length=100)),
                ('description', models.TextField(blank=True)),
                ('description_pt', models.TextField(blank=True, help_text='Portuguese description')),
                ('description_en', models.TextField(blank=True, help_text='English description')),
                ('icon', models.CharField(blank=True, help_text='Icon class or identifier', max_length=50)),
                ('color', models.CharField(default='#007bff', help_text='Hex color code', max_length=7)),
                ('is_active', models.BooleanField(default=True)),
                ('sort_order', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='services.servicecategory')),
            ],
            options={
                'verbose_name': 'Service Category',
                'verbose_name_plural': 'Service Categories',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ServiceAttribute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('name_pt', models.CharField(blank=True, max_length=100)),
                ('name_en', models.CharField(blank=True, max_length=100)),
                ('attribute_type', models.CharField(choices=[('TEXT', 'Text'), ('NUMBER', 'Number'), ('SELECT', 'Select'), ('MULTISELECT', 'Multi-select'), ('BOOLEAN', 'Boolean'), ('FILE', 'File Upload')], max_length=15)),
                ('is_required', models.BooleanField(default=False)),
                ('is_filterable', models.BooleanField(default=False)),
                ('options', models.JSONField(blank=True, default=list, help_text='Available options for select fields')),
                ('options_pt', models.JSONField(blank=True, default=list, help_text='Portuguese options')),
                ('options_en', models.JSONField(blank=True, default=list, help_text='English options')),
                ('min_value', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('max_value', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('max_length', models.PositiveIntegerField(blank=True, null=True)),
                ('sort_order', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attributes', to='services.servicecategory')),
            ],
            options={
                'verbose_name': 'Service Attribute',
                'verbose_name_plural': 'Service Attributes',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('name_pt', models.CharField(blank=True, help_text='Portuguese name', max_length=200)),
                ('name_en', models.CharField(blank=True, help_text='English name', max_length=200)),
                ('description', models.TextField()),
                ('description_pt', models.TextField(blank=True, help_text='Portuguese description')),
                ('description_en', models.TextField(blank=True, help_text='English description')),
                ('pricing_type', models.CharField(choices=[('FIXED', 'Fixed Price'), ('HOURLY', 'Hourly Rate'), ('PER_UNIT', 'Per Unit'), ('CUSTOM', 'Custom Quote')], default='FIXED', max_length=10)),
                ('base_price', models.DecimalField(decimal_places=2, help_text='Base price in local currency', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('currency', models.CharField(default='USD', help_text='Currency code (USD, EUR, etc.)', max_length=3)),
                ('duration_minutes', models.PositiveIntegerField(default=90, help_text='Minimum duration in minutes (must be at least 90 for 1.5h slots)', validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(1440)])),
                ('max_duration_hours', models.PositiveIntegerField(default=8, help_text='Maximum duration in hours', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(24)])),
                ('is_online_available', models.BooleanField(default=False, help_text='Can be provided online')),
                ('is_home_service', models.BooleanField(default=False, help_text='Can be provided at client location')),
                ('requires_equipment', models.BooleanField(default=False)),
                ('equipment_provided', models.BooleanField(default=True)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('INACTIVE', 'Inactive'), ('SUSPENDED', 'Suspended'), ('PENDING_APPROVAL', 'Pending Approval')], default='PENDING_APPROVAL', max_length=20)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('rejection_reason', models.TextField(blank=True)),
                ('images', models.JSONField(blank=True, default=list, help_text='List of image URLs')),
                ('total_bookings', models.PositiveIntegerField(default=0)),
                ('completed_bookings', models.PositiveIntegerField(default=0)),
                ('average_rating', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_services', to=settings.AUTH_USER_MODEL)),
                ('partner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='services', to=settings.AUTH_USER_MODEL)),
                ('primary_location', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='primary_services', to='accounts.location')),
                ('service_areas', models.ManyToManyField(blank=True, related_name='available_services', to='accounts.location')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='services', to='services.servicecategory')),
            ],
            options={
                'verbose_name': 'Service',
                'verbose_name_plural': 'Services',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AvailabilitySlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('is_available', models.BooleanField(default=True)),
                ('is_blocked', models.BooleanField(default=False)),
                ('block_reason', models.CharField(blank=True, max_length=200)),
                ('price_override', models.DecimalField(blank=True, decimal_places=2, help_text='Override service price for this slot', max_digits=10, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('partner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availability_slots', to=settings.AUTH_USER_MODEL)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availability_slots', to='services.service')),
            ],
            options={
                'verbose_name': 'Availability Slot',
                'verbose_name_plural': 'Availability Slots',
                'ordering': ['start_time'],
                'indexes': [models.Index(fields=['start_time', 'end_time'], name='services_av_start_t_2076aa_idx'), models.Index(fields=['service', 'start_time'], name='services_av_service_b2f0ce_idx')],
            },
        ),
        migrations.CreateModel(
            name='ServiceAttributeValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.JSONField(help_text='The actual attribute value')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('attribute', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='values', to='services.serviceattribute')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attribute_values', to='services.service')),
            ],
            options={
                'verbose_name': 'Service Attribute Value',
                'verbose_name_plural': 'Service Attribute Values',
                'unique_together': {('service', 'attribute')},
            },
        ),
    ]
